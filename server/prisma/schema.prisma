generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SCHED_DATABASE_URL")
}

model Group {
  id       Int      @id
  name     String
  specId   Int      @default(0)
  specName String   @default("Unknown")
  lessons  Lesson[]
  user     User[]
  weeks    Week[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Flow {
  id             Int      @id
  name           String
  disciplineId   Int      @default(0)
  disciplineName String   @default("Unknown")
  lessons        Lesson[]
  user           User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Teacher {
  id        Int      @id
  name      String
  shortname String
  state     String
  Lesson    Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Week {
  id        String   @id
  year      Int
  number    Int
  updatedAt DateTime @default(value: "1970-01-01T00:00:00.000Z")

  lessons Lesson[]
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  group   Group?   @relation(fields: [groupId], references: [id])
  groupId Int?

  createdAt    DateTime @default(now())
  db_updatedAt DateTime @updatedAt()

  @@unique([userId, year, number])
}

enum LessonType {
  Lection // 1
  Lab // 2
  Practice // 3
  Other // 4
  Exam // 5
  Consult // 6
  Military
  Window
  CourseWork
  Test
  Unknown
}

model Lesson {
  id                  Int                   @id // I trust in ssau's autoincremented ids :D
  type                LessonType
  discipline          String
  validUntil          DateTime
  isOnline            Boolean
  building            String?
  room                String?
  groups              Group[]
  flows               Flow[]
  isIet               Boolean               @default(false)
  subgroup            Int?
  teacher             Teacher               @relation(fields: [teacherId], references: [id])
  teacherId           Int
  dayTimeSlot         Int
  date                DateTime
  beginTime           DateTime
  endTime             DateTime
  week                Week[]
  weekNumber          Int
  weekday             Int
  conferenceUrl       String?
  CachedWeekTimetable CachedWeekTimetable[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model User {
  id                  Int                   @id
  staffId             Int? // LK id
  fullname            String?
  group               Group?                @relation(fields: [groupId], references: [id])
  groupId             Int?
  flows               Flow[]
  authCookie          String?
  authCookieExpiresAt DateTime              @default(value: "1970-01-01T00:00:00.000Z")
  sessionExpiresAt    DateTime              @default(value: "1970-01-01T00:00:00.000Z")
  username            String?
  password            String?
  notifyOnNextLesson  Boolean               @default(true)
  notifyOnNextDay     Boolean               @default(true)
  notifyOnNextWeek    Boolean               @default(true)
  subgroup            Int?
  ics                 Ics?
  cachedTimetables    CachedWeekTimetable[]
  weeks               Week[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Ics {
  id         Int      @id
  user       User     @relation(fields: [id], references: [id], onDelete: Cascade)
  validUntil DateTime @default(value: "1970-01-01T00:00:00.000Z")
  file       Bytes    @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model CachedWeekTimetable {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  groupId    Int?
  // handle ietless
  weekNumber Int
  validUntil DateTime
  lessons    Lesson[]
  data       Json
  image      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
